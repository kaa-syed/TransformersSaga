/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ArrayString;
import io.swagger.model.Result;
import io.swagger.model.Transformer;
import io.swagger.model.Transformers;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-07-11T12:42:06.333Z[GMT]")
@Api(value = "transformers", description = "the transformers API")
public interface TransformersApi {

	@ApiOperation(value = "create transformer", nickname = "createTransformer", notes = "Adds a new transformer to the system", tags = {
			"transformer", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "transformer created"),
			@ApiResponse(code = 400, message = "Bad request! invalid input, object invalid"),
			@ApiResponse(code = 409, message = "an existing transformer already exists") })
	@RequestMapping(value = "/transformers/transformer", consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> createTransformer(@ApiParam(value = "") @Valid @RequestBody Transformer body);

	@ApiOperation(value = "removing the transformer by name", nickname = "deleteTransformerByName", notes = "deleting a transformer via it's name.", response = Transformer.class, tags = {
			"transformer", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Existing transformer is deleted", response = Transformer.class),
			@ApiResponse(code = 204, message = "Non existing transformer"),
			@ApiResponse(code = 400, message = "Bad request! invalid input, object invalid") })
	@RequestMapping(value = "/transformers/transformer/{name}", produces = {
			"application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Transformer> deleteTransformerByName(
			@ApiParam(value = "transformer's unique name", required = true) @PathVariable("name") String name);

	@ApiOperation(value = "Initiating battle between the trasformers in the input list and returning the result", nickname = "initiateBattle", notes = "Initiate battle between given list of transformers by name and by IDs. The default is the battle between all transformers defined in the system.", response = Result.class, tags = {
			"battle", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "result of the battles", response = Result.class),
			@ApiResponse(code = 400, message = "Bad request! invalid input, object invalid", response = ArrayString.class) })
	@RequestMapping(value = "/transformers/battle", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<Result> initiateBattle(
			@ApiParam(value = "") @Valid @RequestParam(value = "names", required = false) List<String> names,
			@ApiParam(value = "") @Valid @RequestParam(value = "ids", required = false) List<String> ids);

	@ApiOperation(value = "List of all transformers", nickname = "listAllTransformers", notes = "List of all transformers defined in the system", response = Transformers.class, tags = {
			"list", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "result of the transformer search", response = Transformers.class),
			@ApiResponse(code = 204, message = "Empty transformer list"),
			@ApiResponse(code = 400, message = "Bad request! invalid input, object invalid") })
	@RequestMapping(value = "/transformers/all", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<Transformers> listAllTransformers();

	@ApiOperation(value = "List of team members", nickname = "listTransformers", notes = "Pass an optional team name for looking up tranformers in the specified team.", response = Transformers.class, tags = {
			"list", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "result of the transformer search", response = Transformers.class),
			@ApiResponse(code = 204, message = "Empty transformer list"),
			@ApiResponse(code = 400, message = "Bad request! invalid input, object invalid") })
	@RequestMapping(value = "/transformers/list/{team}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<Transformers> listTransformers(
			@ApiParam(value = "transformers team name", required = true) @PathVariable("team") String team);

	@ApiOperation(value = "updating an existing transformer defination", nickname = "updateTransformer", notes = "", response = Transformer.class, tags = {
			"transformer", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "transformers updated"),
			@ApiResponse(code = 400, message = "Bad request! invalid input, object invalid"),
			@ApiResponse(code = 409, message = "conflict with an existing transformer", response = Transformer.class) })
	@RequestMapping(value = "/transformers/transformer", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PATCH)
	ResponseEntity<Transformer> updateTransformer(@ApiParam(value = "") @Valid @RequestBody Transformer body);

}
